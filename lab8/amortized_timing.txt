Q: Is one sorting algorithm always faster than another?
A: Not necessarily. It is possible for one sorting algorithm to finish in the same time as another.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: Depending on how the information is sorted, the different algorithms would take different times to complete.
In certain situations, BubbleSort might be better, while in other cases, InsertionSort is a better choice.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: If an algorithm usually is heavily skewed towards an either faster or slower time, it would not be evident in the asymptotical bounds.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: Not necessarily. It is possible for a sorting algorithm to take a shorter amount of time on a longer list.
For example, if we use an insertion sort and an array is almost arranged, that would take less time than a more "random" array that
is one element longer.

Q: How does changing nrepeats change the plot?
A: I believe that is smooths out the plot due to the increase in sample size

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No its not. They are very similar, however, there is slight differences due to variance.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: