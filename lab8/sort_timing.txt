Q: Is one GrowList implementation always better than the others?
A: No. Depending on the list, different implementations can be quicker than others.

Q: Why is the runtime for N insertions into a geometrically resizing list a Theta(N) operation?
A: I believe since a geometrically resizing list increases by a factor, that the runtime is constant as a result?
I'm not fully sure.

Q: Why is the runtime for N insertions into a arithmetically resizing list a Theta(N^2) operation?
A: Perhaps to add an element to the list, you are required to calculate both of the times individually and they are multiplicative when combined.

Q: How does the runtime per operation for the ArithGrowList compare to that of GeomGrowList and JavaGrowList? Specifically look at the non-accumulated plots and describe the trends for how long each operation takes as a function of how many elements have already been inserted in the list.
A: The runtime per operation of the ArithGrowList is scaled by a factor of n rather than a constant.

Q: When are there spikes in the per operation runtime graphs for each of the implementations? Do these make sense to you? Hint: some of these should and others might not. Empirical runtime can be quite messy and depends on machine specifics which will be revealed in other subsequent classes like CS61C.
A: There is a spike at every power of two minus one for the geometric implementation which makes sense since
more calculations are needed due to their not being a clear power of two that equates to the answer.

Q: Optional: Try changing the code for GeomGrowList to resize by a different factor. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A:

Q: Optional: Try changing the code for ArithGrowList to resize by adding a different fixed number of spots in the array. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A: